name: Deploy Infrastructure and Applications

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
  EXOSCALE_API_SECRET: ${{ secrets.EXOSCALE_API_SECRET }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="exoscale_key=${{ secrets.EXOSCALE_API_KEY }}" -var="exoscale_secret=${{ secrets.EXOSCALE_API_SECRET }}"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      continue-on-error: true
      run: |
        cd terraform
        terraform apply -auto-approve -var="exoscale_key=${{ secrets.EXOSCALE_API_KEY }}" -var="exoscale_secret=${{ secrets.EXOSCALE_API_SECRET }}" || echo "Terraform apply failed, continuing with existing cluster..."

    - name: Check if kubeconfig exists
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        if [ -f terraform/kubeconfig ]; then
          echo "Kubeconfig found, proceeding with ArgoCD operations"
          echo "KUBECONFIG_EXISTS=true" >> $GITHUB_ENV
        else
          echo "Kubeconfig not found, skipping ArgoCD operations"
          echo "KUBECONFIG_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Wait for ArgoCD
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.KUBECONFIG_EXISTS == 'true'
      run: |
        cd terraform
        kubectl --kubeconfig=./kubeconfig wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
        kubectl --kubeconfig=./kubeconfig wait --for=condition=available --timeout=600s deployment/argocd-application-controller -n argocd

    - name: Get ArgoCD Admin Password
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.KUBECONFIG_EXISTS == 'true'
      run: |
        cd terraform
        echo "ArgoCD Admin Password:"
        kubectl --kubeconfig=./kubeconfig -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

    - name: Create ArgoCD Applications if missing
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.KUBECONFIG_EXISTS == 'true'
      run: |
        cd terraform
        echo "Checking and creating ArgoCD applications..."
        
        # Create gruppe5-gute application if it doesn't exist
        if ! kubectl --kubeconfig=./kubeconfig -n argocd get application gruppe5-gute >/dev/null 2>&1; then
          echo "Creating gruppe5-gute application..."
          cat <<EOF | kubectl --kubeconfig=./kubeconfig apply -f -
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: gruppe5-gute
          namespace: argocd
        spec:
          project: default
          source:
            repoURL: https://github.com/bug-sult/opentofu.git
            targetRevision: HEAD
            path: kubernetes/gruppe5-gute
          destination:
            server: https://kubernetes.default.svc
            namespace: gruppe5-gute
          syncPolicy:
            automated:
              prune: true
              selfHeal: true
            syncOptions:
            - CreateNamespace=true
        EOF
        else
          echo "gruppe5-gute application already exists"
        fi

    - name: Force Sync ArgoCD Applications
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.KUBECONFIG_EXISTS == 'true'
      run: |
        cd terraform
        echo "Force syncing ArgoCD applications..."
        kubectl --kubeconfig=./kubeconfig -n argocd get applications -o name | while read app; do
          echo "Syncing $app..."
          kubectl --kubeconfig=./kubeconfig -n argocd patch $app -p '{"spec":{"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}' --type=merge
          kubectl --kubeconfig=./kubeconfig -n argocd patch $app -p '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"hard"}}}' --type=merge
        done
        
    - name: Get Node IP and Service URLs
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.KUBECONFIG_EXISTS == 'true'
      run: |
        cd terraform
        echo "Getting node IP..."
        NODE_IP=$(kubectl --kubeconfig=./kubeconfig get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        echo "Node IP: $NODE_IP"
        echo ""
        echo "Application URLs:"
        echo "ArgoCD UI: https://$NODE_IP:30081"
        echo "Example App: http://$NODE_IP:30080"
        echo "Keycloak: http://$NODE_IP:30083"
        echo "Gruppe5-Gute: http://$NODE_IP:30084"
        echo ""
        echo "ArgoCD Login:"
        echo "Username: admin"
        echo "Password: (see above output)"
