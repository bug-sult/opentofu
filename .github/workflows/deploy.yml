name: Kubernetes App Deployment

on:
  push:
    branches: [ main, master ]
    paths:
      - 'kubernetes/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'kubernetes/**'
  workflow_dispatch:  # Optional: manuelles Triggern

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

    - name: Detect modified app folder
      id: detect
      run: |
        APP_FOLDER=$(git diff --name-only ${{ github.event.before || github.sha }} ${{ github.sha }} | grep '^kubernetes/' | cut -d/ -f2 | sort -u | head -n1)
        if [ -z "$APP_FOLDER" ]; then
          echo "❌ No application folder detected in 'kubernetes/'. Exiting."
          exit 1
        fi
        echo "Detected app folder: $APP_FOLDER"
        echo "app_name=$APP_FOLDER" >> "$GITHUB_OUTPUT"

    - name: Deploy Kubernetes manifests
      run: |
        APP="kubernetes/${{ steps.detect.outputs.app_name }}"
        echo "🚀 Deploying app: $APP"

        if [ ! -f "$APP/namespace.yaml" ]; then echo "❌ $APP/namespace.yaml not found"; exit 1; fi
        if [ ! -f "$APP/deployment.yaml" ]; then echo "❌ $APP/deployment.yaml not found"; exit 1; fi
        if [ ! -f "$APP/service.yaml" ]; then echo "❌ $APP/service.yaml not found"; exit 1; fi

        kubectl apply -f "$APP/namespace.yaml"
        kubectl apply -f "$APP/deployment.yaml"
        kubectl apply -f "$APP/service.yaml"
        echo "✅ Manifests applied for $APP"

    - name: Wait for Deployment to be ready
      run: |
        APP="${{ steps.detect.outputs.app_name }}"
        DEPLOY_NAME="${APP}-frontend"
        echo "⏳ Waiting for deployment $DEPLOY_NAME in namespace $APP..."

        for i in {1..30}; do
          READY=$(kubectl get deploy -n $APP $DEPLOY_NAME -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
          if [ "$READY" -ge 1 ]; then
            echo "✅ Deployment is ready!"
            break
          fi
          echo "⌛ Versuch $i/30 – noch nicht bereit..."
          sleep 10
        done

        echo "📦 Aktuelle Pods:
