name: Kubernetes App Deployment

on:
  push:
    branches: [ main, master ]
    paths:
      - 'kubernetes/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'kubernetes/**'
  workflow_dispatch:

jobs:
  detect-apps:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed apps
        id: set-matrix
        run: |
          echo "üîç Scanning for changed apps in 'kubernetes/'..."
          APPS=$(git diff --name-only ${{ github.event.before || github.sha }} ${{ github.sha }} \
            | grep '^kubernetes/' \
            | cut -d/ -f2 \
            | sort -u \
            | jq -R . | jq -s .)

          if [ "$APPS" = "[]" ] || [ -z "$APPS" ]; then
            echo "‚ùå No changed app folders detected. Exiting."
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "üì¶ Found changed apps: $APPS"
            echo "matrix={\"include\":$(echo $APPS | jq '[.[] | {app: .}]')}" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: detect-apps
    if: needs.detect-apps.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-apps.outputs.matrix)}}
    name: Deploy ${{ matrix.app }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Validate Kubernetes manifests
        run: |
          APP_PATH="kubernetes/${{ matrix.app }}"
          echo "üîç Validating Kubernetes manifests in $APP_PATH"

          for file in namespace.yaml deployment.yaml service.yaml; do
            if [ ! -f "$APP_PATH/$file" ]; then
              echo "‚ùå Missing required file: $APP_PATH/$file"
              exit 1
            fi
          done

          kubectl --dry-run=client apply -f "$APP_PATH/namespace.yaml"
          kubectl --dry-run=client apply -f "$APP_PATH/deployment.yaml"
          kubectl --dry-run=client apply -f "$APP_PATH/service.yaml"

          if [ -f "$APP_PATH/argocd-application.yaml" ]; then
            echo "‚úÖ Found ArgoCD Application manifest"
            kubectl --dry-run=client apply -f "$APP_PATH/argocd-application.yaml"
          else
            echo "‚ùå Missing ArgoCD Application manifest"
            exit 1
          fi

      - name: Create ArgoCD Application
        run: |
          APP_PATH="kubernetes/${{ matrix.app }}"
          echo "üîÑ Creating/Updating ArgoCD Application first"
          
          # Ensure argocd namespace exists
          kubectl get namespace argocd || kubectl create namespace argocd
          
          # Apply ArgoCD Application
          kubectl apply -f "$APP_PATH/argocd-application.yaml"
          
          echo "‚úÖ ArgoCD Application created/updated"

      - name: Deploy to Kubernetes
        run: |
          APP_PATH="kubernetes/${{ matrix.app }}"
          echo "üöÄ Deploying $APP_PATH"

          kubectl apply -f "$APP_PATH/namespace.yaml"
          kubectl apply -f "$APP_PATH/deployment.yaml"
          kubectl apply -f "$APP_PATH/service.yaml"

      - name: Wait for rollout
        run: |
          echo "‚è≥ Waiting for deployment rollout..."
          kubectl rollout status deployment/${{ matrix.app }}-frontend -n ${{ matrix.app }} --timeout=300s

      - name: Post-deployment check
        run: |
          echo "üîç Verifying deployment in namespace '${{ matrix.app }}'"
          kubectl get pods -n ${{ matrix.app }}
          kubectl get svc -n ${{ matrix.app }}

          RUNNING_PODS=$(kubectl get pods -n ${{ matrix.app }} --field-selector=status.phase=Running --no-headers | wc -l)
          if [ "$RUNNING_PODS" -eq 0 ]; then
            echo "‚ùå No running pods in namespace ${{ matrix.app }}"
            exit 1
          fi
          echo "‚úÖ All pods running successfully"

      - name: Verify ArgoCD Application
        run: |
          echo "üîç Verifying ArgoCD Application status"
          
          # Wait for ArgoCD Application to be created
          for i in {1..30}; do
            if kubectl get application ${{ matrix.app }} -n argocd; then
              echo "‚úÖ ArgoCD Application found"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "‚ùå Timeout waiting for ArgoCD Application"
              exit 1
            fi
            
            echo "‚è≥ Waiting for ArgoCD Application to be created... (attempt $i/30)"
            sleep 10
          done
          
          # Get Application details
          echo "üìä ArgoCD Application Status:"
          kubectl get application ${{ matrix.app }} -n argocd -o wide
          
          # Check sync status
          SYNC_STATUS=$(kubectl get application ${{ matrix.app }} -n argocd -o jsonpath='{.status.sync.status}')
          HEALTH_STATUS=$(kubectl get application ${{ matrix.app }} -n argocd -o jsonpath='{.status.health.status}')
          
          echo "Sync Status: $SYNC_STATUS"
          echo "Health Status: $HEALTH_STATUS"
          
          if [ "$SYNC_STATUS" != "Synced" ]; then
            echo "‚ùå Application is not synced"
            kubectl describe application ${{ matrix.app }} -n argocd
            exit 1
          fi
          
          echo "‚úÖ ArgoCD Application is synced and healthy"

      - name: Display Access Information
        run: |
          echo "======================================"
          echo "üéâ Deployment Complete: ${{ matrix.app }}"
          echo "======================================"
          echo "üìä Resources Status:"
          echo "-------------------"
          echo "Pods:"
          kubectl get pods -n ${{ matrix.app }}
          echo ""
          echo "Service:"
          kubectl get svc -n ${{ matrix.app }}
          echo ""
          echo "ArgoCD Application:"
          kubectl get application ${{ matrix.app }} -n argocd
          echo "======================================"
          echo "üîó Access URLs:"
          echo "ArgoCD UI: http://[NODE-IP]:30085"
          echo "Application: Check service NodePort in ArgoCD UI"
          echo "======================================"
