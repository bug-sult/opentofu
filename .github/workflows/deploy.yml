name: Kubernetes App Deployment

on:
  push:
    branches: [ main, master ]
    paths:
      - 'kubernetes/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'kubernetes/**'
  workflow_dispatch:

jobs:
  detect-apps:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed apps
        id: set-matrix
        run: |
          echo "🔍 Scanning for changed apps in 'kubernetes/'..."
          APPS=$(git diff --name-only ${{ github.event.before || github.sha }} ${{ github.sha }} \
            | grep '^kubernetes/' \
            | cut -d/ -f2 \
            | sort -u \
            | jq -R . | jq -s .)

          if [ "$APPS" = "[]" ] || [ -z "$APPS" ]; then
            echo "❌ No changed app folders detected. Exiting."
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "📦 Found changed apps: $APPS"
            echo "matrix={\"include\":$(echo $APPS | jq '[.[] | {app: .}]')}" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: detect-apps
    if: needs.detect-apps.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-apps.outputs.matrix)}}
    name: Deploy ${{ matrix.app }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Validate Kubernetes manifests
        run: |
          APP_PATH="kubernetes/${{ matrix.app }}"
          echo "🔍 Validating Kubernetes manifests in $APP_PATH"

          # Special handling for App-of-Apps pattern
          if [ "${{ matrix.app }}" = "gruppe-5-tester" ]; then
            echo "📦 Detected App-of-Apps pattern for gruppe-5-tester"
            
            # Validate app-of-apps.yaml
            if [ ! -f "$APP_PATH/app-of-apps.yaml" ]; then
              echo "❌ Missing app-of-apps.yaml"
              exit 1
            fi
            kubectl --dry-run=client apply -f "$APP_PATH/app-of-apps.yaml"
            
            # Validate child applications
            for child_app in "$APP_PATH/child-applications"/*.yaml; do
              if [ -f "$child_app" ]; then
                echo "✅ Validating child application: $(basename $child_app)"
                kubectl --dry-run=client apply -f "$child_app"
              fi
            done
            
            # Validate individual app manifests
            for app_dir in "$APP_PATH"/app*/; do
              if [ -d "$app_dir" ]; then
                echo "✅ Validating app directory: $(basename $app_dir)"
                for file in namespace.yaml deployment.yaml service.yaml; do
                  if [ -f "$app_dir/$file" ]; then
                    kubectl --dry-run=client apply -f "$app_dir/$file"
                  fi
                done
              fi
            done
          else
            # Standard validation for regular apps
            for file in namespace.yaml deployment.yaml service.yaml; do
              if [ ! -f "$APP_PATH/$file" ]; then
                echo "❌ Missing required file: $APP_PATH/$file"
                exit 1
              fi
            done

            kubectl --dry-run=client apply -f "$APP_PATH/namespace.yaml"
            kubectl --dry-run=client apply -f "$APP_PATH/deployment.yaml"
            kubectl --dry-run=client apply -f "$APP_PATH/service.yaml"
          fi

      - name: Create ArgoCD Application
        run: |
          APP_NAME="${{ matrix.app }}"
          echo "🔄 Creating/Updating ArgoCD Application for $APP_NAME"
          
          # Ensure argocd namespace exists
          kubectl get namespace argocd || kubectl create namespace argocd
          
          # Check if ArgoCD Application file exists in root
          if [ -f "$APP_NAME-argocd.yaml" ]; then
            echo "✅ Found ArgoCD Application manifest: $APP_NAME-argocd.yaml"
            kubectl apply -f "$APP_NAME-argocd.yaml"
          else
            echo "📝 Creating ArgoCD Application manifest for $APP_NAME"
            cat > "$APP_NAME-argocd.yaml" << EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: $APP_NAME
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              repoURL: https://github.com/bug-sult/opentofu.git
              targetRevision: HEAD
              path: kubernetes/$APP_NAME
            destination:
              server: https://kubernetes.default.svc
              namespace: $APP_NAME
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
          EOF
            kubectl apply -f "$APP_NAME-argocd.yaml"
          fi
          
          echo "✅ ArgoCD Application created/updated"

      - name: Deploy to Kubernetes
        run: |
          APP_PATH="kubernetes/${{ matrix.app }}"
          echo "🚀 Deploying $APP_PATH"

          # Special handling for App-of-Apps pattern
          if [ "${{ matrix.app }}" = "gruppe-5-tester" ]; then
            echo "📦 Deploying App-of-Apps pattern for gruppe-5-tester"
            
            # Deploy individual app manifests first
            for app_dir in "$APP_PATH"/app*/; do
              if [ -d "$app_dir" ]; then
                echo "🚀 Deploying $(basename $app_dir)"
                kubectl apply -f "$app_dir/"
              fi
            done
            
            # Then deploy the app-of-apps parent application
            kubectl apply -f "$APP_PATH/app-of-apps.yaml"
          else
            # Standard deployment for regular apps
            kubectl apply -f "$APP_PATH/namespace.yaml"
            kubectl apply -f "$APP_PATH/deployment.yaml"
            kubectl apply -f "$APP_PATH/service.yaml"
          fi

      - name: Wait for rollout
        run: |
          echo "⏳ Waiting for deployment rollout..."
          
          # Special handling for App-of-Apps pattern
          if [ "${{ matrix.app }}" = "gruppe-5-tester" ]; then
            echo "📦 Waiting for App-of-Apps deployments"
            
            # Wait for app1 deployment
            kubectl rollout status deployment/gruppe-5-tester-app1 -n gruppe-5-tester-app1 --timeout=300s
            
            # Wait for app2 deployment
            kubectl rollout status deployment/gruppe-5-tester-app2 -n gruppe-5-tester-app2 --timeout=300s
          else
            # Standard rollout check
            kubectl rollout status deployment/${{ matrix.app }}-frontend -n ${{ matrix.app }} --timeout=300s
          fi

      - name: Post-deployment check
        run: |
          # Special handling for App-of-Apps pattern
          if [ "${{ matrix.app }}" = "gruppe-5-tester" ]; then
            echo "🔍 Verifying App-of-Apps deployments"
            
            # Check app1
            echo "📊 App1 Status:"
            kubectl get pods -n gruppe-5-tester-app1
            kubectl get svc -n gruppe-5-tester-app1
            
            # Check app2
            echo "📊 App2 Status:"
            kubectl get pods -n gruppe-5-tester-app2
            kubectl get svc -n gruppe-5-tester-app2
            
            # Verify running pods in both namespaces
            APP1_PODS=$(kubectl get pods -n gruppe-5-tester-app1 --field-selector=status.phase=Running --no-headers | wc -l)
            APP2_PODS=$(kubectl get pods -n gruppe-5-tester-app2 --field-selector=status.phase=Running --no-headers | wc -l)
            
            if [ "$APP1_PODS" -eq 0 ] || [ "$APP2_PODS" -eq 0 ]; then
              echo "❌ Not all apps have running pods"
              exit 1
            fi
            echo "✅ All App-of-Apps components running successfully"
          else
            # Standard check for regular apps
            echo "🔍 Verifying deployment in namespace '${{ matrix.app }}'"
            kubectl get pods -n ${{ matrix.app }}
            kubectl get svc -n ${{ matrix.app }}

            RUNNING_PODS=$(kubectl get pods -n ${{ matrix.app }} --field-selector=status.phase=Running --no-headers | wc -l)
            if [ "$RUNNING_PODS" -eq 0 ]; then
              echo "❌ No running pods in namespace ${{ matrix.app }}"
              exit 1
            fi
            echo "✅ All pods running successfully"
          fi

      - name: Verify ArgoCD Application
        run: |
          echo "🔍 Verifying ArgoCD Application status"
          
          # Wait for ArgoCD Application to be created
          for i in {1..30}; do
            if kubectl get application ${{ matrix.app }} -n argocd; then
              echo "✅ ArgoCD Application found"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Timeout waiting for ArgoCD Application"
              exit 1
            fi
            
            echo "⏳ Waiting for ArgoCD Application to be created... (attempt $i/30)"
            sleep 10
          done
          
          # Get Application details
          echo "📊 ArgoCD Application Status:"
          kubectl get application ${{ matrix.app }} -n argocd -o wide
          
          # Check sync status
          SYNC_STATUS=$(kubectl get application ${{ matrix.app }} -n argocd -o jsonpath='{.status.sync.status}')
          HEALTH_STATUS=$(kubectl get application ${{ matrix.app }} -n argocd -o jsonpath='{.status.health.status}')
          
          echo "Sync Status: $SYNC_STATUS"
          echo "Health Status: $HEALTH_STATUS"
          
          if [ "$SYNC_STATUS" != "Synced" ]; then
            echo "❌ Application is not synced"
            kubectl describe application ${{ matrix.app }} -n argocd
            exit 1
          fi
          
          echo "✅ ArgoCD Application is synced and healthy"

      - name: Display Access Information
        run: |
          echo "======================================"
          echo "🎉 Deployment Complete: ${{ matrix.app }}"
          echo "======================================"
          echo "📊 Resources Status:"
          echo "-------------------"
          echo "Pods:"
          kubectl get pods -n ${{ matrix.app }}
          echo ""
          echo "Service:"
          kubectl get svc -n ${{ matrix.app }}
          echo ""
          echo "ArgoCD Application:"
          kubectl get application ${{ matrix.app }} -n argocd
          echo "======================================"
          echo "🔗 Access URLs:"
          echo "ArgoCD UI: http://[NODE-IP]:30085"
          echo "Application: Check service NodePort in ArgoCD UI"
          echo "======================================"
