apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-backend
  namespace: example-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example-backend
  template:
    metadata:
      labels:
        app: example-backend
    spec:
      containers:
      - name: example-backend
        image: node:18-alpine
        command: ["sh"]
        args: ["-c", "npm init -y && npm install express cors && node -e \"const express=require('express');const cors=require('cors');const app=express();app.use(cors());app.get('/api/hello',(_,res)=>res.json({message:'Hello from the backend!',timestamp:new Date().toISOString(),version:'1.0.0'}));app.get('/health',(_,res)=>res.json({status:'healthy'}));app.listen(3001,()=>console.log('Backend running on port 3001'));\""]
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: example-backend-service
  namespace: example-app
spec:
  selector:
    app: example-backend
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
  type: ClusterIP
