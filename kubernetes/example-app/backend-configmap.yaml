apiVersion: v1
kind: ConfigMap
metadata:
  name: example-backend-app
  namespace: example-app
data:
  package.json: |-
    {
      "name": "example-backend",
      "version": "1.0.0",
      "description": "Simple Express.js backend for example app",
      "main": "server.js",
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js"
      },
      "dependencies": {
        "express": "^4.18.2",
        "cors": "^2.8.5"
      },
      "devDependencies": {
        "nodemon": "^3.0.1"
      },
      "keywords": ["express", "api", "backend"],
      "author": "",
      "license": "MIT"
    }
  server.js: |-
    const express = require('express');
    const cors = require('cors');

    const app = express();
    const PORT = process.env.PORT || 3001;

    // Middleware
    app.use(cors());
    app.use(express.json());

    // Routes
    app.get('/', (req, res) => {
      res.json({
        message: 'Example Backend API is running!',
        version: '1.0.0',
        timestamp: new Date().toISOString()
      });
    });

    app.get('/hello', (req, res) => {
      res.json({
        message: 'Hello from the backend!',
        status: 'success',
        timestamp: new Date().toISOString(),
        server: 'Express.js'
      });
    });

    app.get('/api/hello', (req, res) => {
      res.json({
        message: 'Hello from the backend API!',
        status: 'success',
        timestamp: new Date().toISOString(),
        server: 'Express.js',
        endpoint: '/api/hello'
      });
    });

    app.get('/health', (req, res) => {
      res.json({
        status: 'healthy',
        uptime: process.uptime(),
        timestamp: new Date().toISOString()
      });
    });

    // Error handling middleware
    app.use((err, req, res, next) => {
      console.error(err.stack);
      res.status(500).json({
        error: 'Something went wrong!',
        message: err.message
      });
    });

    // 404 handler
    app.use('*', (req, res) => {
      res.status(404).json({
        error: 'Not Found',
        message: `Route ${req.originalUrl} not found`,
        timestamp: new Date().toISOString()
      });
    });

    app.listen(PORT, '0.0.0.0', () => {
      console.log(`Backend server is running on port ${PORT}`);
      console.log(`Health check available at http://localhost:${PORT}/health`);
    });
